// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*transferLogMarshaling)(nil)

func (t TransferLog) MarshalJSON() ([]byte, error) {
	type TransferLog struct {
		From   common.Address `json:"from" gencodec:"required"`
		To     common.Address `json:"to" gencodec:"required"`
		Value  *hexutil.Big   `json:"value" gencodec:"required"`
		TxHash common.Hash    `json:"transactionHash" gencodec:"required"`
	}
	var enc TransferLog
	enc.From = t.From
	enc.To = t.To
	enc.Value = (*hexutil.Big)(t.Value)
	enc.TxHash = t.TxHash
	return json.Marshal(&enc)
}

func (t *TransferLog) UnmarshalJSON(input []byte) error {
	type TransferLog struct {
		From   *common.Address `json:"from" gencodec:"required"`
		To     *common.Address `json:"to" gencodec:"required"`
		Value  *hexutil.Big    `json:"value" gencodec:"required"`
		TxHash *common.Hash    `json:"transactionHash" gencodec:"required"`
	}
	var dec TransferLog
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.From == nil {
		return errors.New("missing required field 'from' for TransferLog")
	}
	t.From = *dec.From
	if dec.To == nil {
		return errors.New("missing required field 'to' for TransferLog")
	}
	t.To = *dec.To
	if dec.Value == nil {
		return errors.New("missing required field 'value' for TransferLog")
	}
	t.Value = (*big.Int)(dec.Value)
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for TransferLog")
	}
	t.TxHash = *dec.TxHash
	return nil
}
